services:
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    environment:
      - API_PORT=3000
    env_file:
      - ./backend/api/.env.docker
    deploy:
      replicas: 2
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  api-load-balancer:
    image: nginx:alpine
    ports:
      - "4000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api

  kitchen:
    build:
      context: ./backend/kitchen
      dockerfile: Dockerfile
    env_file:
      - ./backend/kitchen/.env.docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  store:
    build:
      context: ./backend/stores
      dockerfile: Dockerfile
    env_file:
      - ./backend/stores/.env.docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: restaurant_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 20

  rabbitmq:
    image: rabbitmq:management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "56720:5672"
      - "15671:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  adminer:
    image: adminer:4.7
    restart: always
    ports:
      - "4001:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgresql
      ADMINER_DEFAULT_DB_DRIVER: pgsql
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: